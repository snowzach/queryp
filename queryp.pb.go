// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: queryp.proto

package queryp

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FilterLogic int32

const (
	FilterLogic_FilterLogicNone FilterLogic = 0
	FilterLogic_And             FilterLogic = 1
	FilterLogic_Or              FilterLogic = 2
)

// Enum value maps for FilterLogic.
var (
	FilterLogic_name = map[int32]string{
		0: "FilterLogicNone",
		1: "And",
		2: "Or",
	}
	FilterLogic_value = map[string]int32{
		"FilterLogicNone": 0,
		"And":             1,
		"Or":              2,
	}
)

func (x FilterLogic) Enum() *FilterLogic {
	p := new(FilterLogic)
	*p = x
	return p
}

func (x FilterLogic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterLogic) Descriptor() protoreflect.EnumDescriptor {
	return file_queryp_proto_enumTypes[0].Descriptor()
}

func (FilterLogic) Type() protoreflect.EnumType {
	return &file_queryp_proto_enumTypes[0]
}

func (x FilterLogic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterLogic.Descriptor instead.
func (FilterLogic) EnumDescriptor() ([]byte, []int) {
	return file_queryp_proto_rawDescGZIP(), []int{0}
}

type FilterOp int32

const (
	FilterOp_FilterOpNone     FilterOp = 0
	FilterOp_Equals           FilterOp = 1
	FilterOp_NotEquals        FilterOp = 2
	FilterOp_LessThan         FilterOp = 3
	FilterOp_LessThanEqual    FilterOp = 4
	FilterOp_GreaterThan      FilterOp = 5
	FilterOp_GreaterThanEqual FilterOp = 6
	FilterOp_Like             FilterOp = 7
	FilterOp_NotLike          FilterOp = 8
	FilterOp_ILike            FilterOp = 9
	FilterOp_NotILike         FilterOp = 10
	FilterOp_Regexp           FilterOp = 11
	FilterOp_NotRegexp        FilterOp = 12
	FilterOp_IRegexp          FilterOp = 13
	FilterOp_NotIRegexp       FilterOp = 14
)

// Enum value maps for FilterOp.
var (
	FilterOp_name = map[int32]string{
		0:  "FilterOpNone",
		1:  "Equals",
		2:  "NotEquals",
		3:  "LessThan",
		4:  "LessThanEqual",
		5:  "GreaterThan",
		6:  "GreaterThanEqual",
		7:  "Like",
		8:  "NotLike",
		9:  "ILike",
		10: "NotILike",
		11: "Regexp",
		12: "NotRegexp",
		13: "IRegexp",
		14: "NotIRegexp",
	}
	FilterOp_value = map[string]int32{
		"FilterOpNone":     0,
		"Equals":           1,
		"NotEquals":        2,
		"LessThan":         3,
		"LessThanEqual":    4,
		"GreaterThan":      5,
		"GreaterThanEqual": 6,
		"Like":             7,
		"NotLike":          8,
		"ILike":            9,
		"NotILike":         10,
		"Regexp":           11,
		"NotRegexp":        12,
		"IRegexp":          13,
		"NotIRegexp":       14,
	}
)

func (x FilterOp) Enum() *FilterOp {
	p := new(FilterOp)
	*p = x
	return p
}

func (x FilterOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOp) Descriptor() protoreflect.EnumDescriptor {
	return file_queryp_proto_enumTypes[1].Descriptor()
}

func (FilterOp) Type() protoreflect.EnumType {
	return &file_queryp_proto_enumTypes[1]
}

func (x FilterOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOp.Descriptor instead.
func (FilterOp) EnumDescriptor() ([]byte, []int) {
	return file_queryp_proto_rawDescGZIP(), []int{1}
}

type FilterType int32

const (
	FilterType_FilterTypeNone FilterType = 0
	FilterType_NotFound       FilterType = 1
	FilterType_Simple         FilterType = 2
	FilterType_String         FilterType = 3
	FilterType_Numeric        FilterType = 4
	FilterType_Time           FilterType = 5
	FilterType_Bool           FilterType = 6
)

// Enum value maps for FilterType.
var (
	FilterType_name = map[int32]string{
		0: "FilterTypeNone",
		1: "NotFound",
		2: "Simple",
		3: "String",
		4: "Numeric",
		5: "Time",
		6: "Bool",
	}
	FilterType_value = map[string]int32{
		"FilterTypeNone": 0,
		"NotFound":       1,
		"Simple":         2,
		"String":         3,
		"Numeric":        4,
		"Time":           5,
		"Bool":           6,
	}
)

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}

func (x FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_queryp_proto_enumTypes[2].Descriptor()
}

func (FilterType) Type() protoreflect.EnumType {
	return &file_queryp_proto_enumTypes[2]
}

func (x FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterType.Descriptor instead.
func (FilterType) EnumDescriptor() ([]byte, []int) {
	return file_queryp_proto_rawDescGZIP(), []int{2}
}

type QueryParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  []*FilterTerm     `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	Sort    []*SortTerm       `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`
	Options map[string]string `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Limit   int64             `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int64             `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *QueryParameters) Reset() {
	*x = QueryParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queryp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameters) ProtoMessage() {}

func (x *QueryParameters) ProtoReflect() protoreflect.Message {
	mi := &file_queryp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameters.ProtoReflect.Descriptor instead.
func (*QueryParameters) Descriptor() ([]byte, []int) {
	return file_queryp_proto_rawDescGZIP(), []int{0}
}

func (x *QueryParameters) GetFilter() []*FilterTerm {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryParameters) GetSort() []*SortTerm {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *QueryParameters) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *QueryParameters) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryParameters) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SortTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Desc  bool   `protobuf:"varint,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *SortTerm) Reset() {
	*x = SortTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queryp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortTerm) ProtoMessage() {}

func (x *SortTerm) ProtoReflect() protoreflect.Message {
	mi := &file_queryp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortTerm.ProtoReflect.Descriptor instead.
func (*SortTerm) Descriptor() ([]byte, []int) {
	return file_queryp_proto_rawDescGZIP(), []int{1}
}

func (x *SortTerm) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SortTerm) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

type FilterTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logic     FilterLogic   `protobuf:"varint,1,opt,name=logic,proto3,enum=queryp.FilterLogic" json:"logic,omitempty"`
	Op        FilterOp      `protobuf:"varint,2,opt,name=op,proto3,enum=queryp.FilterOp" json:"op,omitempty"`
	Field     string        `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	Value     string        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	SubFilter []*FilterTerm `protobuf:"bytes,10,rep,name=sub_filter,json=subFilter,proto3" json:"sub_filter,omitempty"`
}

func (x *FilterTerm) Reset() {
	*x = FilterTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queryp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTerm) ProtoMessage() {}

func (x *FilterTerm) ProtoReflect() protoreflect.Message {
	mi := &file_queryp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTerm.ProtoReflect.Descriptor instead.
func (*FilterTerm) Descriptor() ([]byte, []int) {
	return file_queryp_proto_rawDescGZIP(), []int{2}
}

func (x *FilterTerm) GetLogic() FilterLogic {
	if x != nil {
		return x.Logic
	}
	return FilterLogic_FilterLogicNone
}

func (x *FilterTerm) GetOp() FilterOp {
	if x != nil {
		return x.Op
	}
	return FilterOp_FilterOpNone
}

func (x *FilterTerm) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FilterTerm) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FilterTerm) GetSubFilter() []*FilterTerm {
	if x != nil {
		return x.SubFilter
	}
	return nil
}

var File_queryp_proto protoreflect.FileDescriptor

var file_queryp_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xb8, 0x01, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52,
	0x05, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2a, 0x33, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x6e, 0x64, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x72, 0x10, 0x02, 0x2a, 0xe7, 0x01, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x70, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x73, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x61, 0x6e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x4c,
	0x69, 0x6b, 0x65, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x09,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x49, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x0a, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f,
	0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x49, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x10, 0x0e, 0x2a, 0x67, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x06, 0x42,
	0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e,
	0x6f, 0x77, 0x7a, 0x61, 0x63, 0x68, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_queryp_proto_rawDescOnce sync.Once
	file_queryp_proto_rawDescData = file_queryp_proto_rawDesc
)

func file_queryp_proto_rawDescGZIP() []byte {
	file_queryp_proto_rawDescOnce.Do(func() {
		file_queryp_proto_rawDescData = protoimpl.X.CompressGZIP(file_queryp_proto_rawDescData)
	})
	return file_queryp_proto_rawDescData
}

var file_queryp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_queryp_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_queryp_proto_goTypes = []interface{}{
	(FilterLogic)(0),        // 0: queryp.FilterLogic
	(FilterOp)(0),           // 1: queryp.FilterOp
	(FilterType)(0),         // 2: queryp.FilterType
	(*QueryParameters)(nil), // 3: queryp.QueryParameters
	(*SortTerm)(nil),        // 4: queryp.SortTerm
	(*FilterTerm)(nil),      // 5: queryp.FilterTerm
	nil,                     // 6: queryp.QueryParameters.OptionsEntry
}
var file_queryp_proto_depIdxs = []int32{
	5, // 0: queryp.QueryParameters.filter:type_name -> queryp.FilterTerm
	4, // 1: queryp.QueryParameters.sort:type_name -> queryp.SortTerm
	6, // 2: queryp.QueryParameters.options:type_name -> queryp.QueryParameters.OptionsEntry
	0, // 3: queryp.FilterTerm.logic:type_name -> queryp.FilterLogic
	1, // 4: queryp.FilterTerm.op:type_name -> queryp.FilterOp
	5, // 5: queryp.FilterTerm.sub_filter:type_name -> queryp.FilterTerm
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_queryp_proto_init() }
func file_queryp_proto_init() {
	if File_queryp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_queryp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queryp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queryp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_queryp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_queryp_proto_goTypes,
		DependencyIndexes: file_queryp_proto_depIdxs,
		EnumInfos:         file_queryp_proto_enumTypes,
		MessageInfos:      file_queryp_proto_msgTypes,
	}.Build()
	File_queryp_proto = out.File
	file_queryp_proto_rawDesc = nil
	file_queryp_proto_goTypes = nil
	file_queryp_proto_depIdxs = nil
}
